1) Write a C program to perform Matrix Multiplication
#include<stdio.h>
int main()
{
    int a[20][20],b[20][20];
    int c[20][20];
    int m,n;
    
    printf("enter the row value\n");
    scanf("%d",&m);
    printf("enter the no of cols");
    scanf("%d",&n);
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",a[i][j]);
             printf("\t");
        }
       
        printf("\n");
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&b[i][j]);        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",b[i][j]);
            printf("\t");
        }
        printf("\n");
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        
        {
            for(int k=0;k<m;k++)
            {
                c[i][j]+=a[i][k] * b[k][j];
            }
            
        }
    }
    printf("the multplication of two matrix is \n");
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",c[i][j]);
            printf("\t");
        }
        printf("\n");
    }
    
}
2) Write a C program to find Odd or Even number from a given set of numbers
#include <stdio.h>
int main() {
    int i, n, num;
    printf("Enter how many numbers: ");
    scanf("%d", &n);
    for(i = 1; i <= n; i++) {
        printf("Enter number %d: ", i);
        scanf("%d", &num);
        if(num % 2 == 0)
            printf("%d is Even\n", num);
        else
            printf("%d is Odd\n", num);
    }
    return 0;
}
3) Write a C program to find Factorial of a given number without using Recursion
#include<stdio.h>
int main()
{
    int num;
    int fact=1;
    printf("enter the number");
    scanf("%d",&num);
    for(int i=1;i<=num;i++)
    {
        fact= fact *i; 
    }
    printf("the factorail of num is %d",fact);
    
}
4) Write a C program to find Fibonacci series without using Recursion
#include <stdio.h>

int main() {
    int n, a = 0, b = 1, c, i;

    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");
    for(i = 0; i < n; i++) {
        printf("%d ", a);
        c = a + b;
        a = b;
        b = c;
    }

    return 0;
}
5) Write a C program to find Factorial of a given number using Recursion
#include <stdio.h>

int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    printf("Factorial of %d is %d\n", num, factorial(num));
    return 0;
}
6) Write a C program to find Fibonacci series using Recursion
#include <stdio.h>

int fibonacci(int n) {
    if(n == 0) return 0;
    if(n == 1) return 1;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n;
    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");
    for(int i = 0; i < n; i++) {
        printf("%d ", fibonacci(i));
    }

    return 0;
}
7) Write a C program to implement Array operations such as Insert, Delete and Display
#include <stdio.h>

#define SIZE 100

int main() {
    int arr[SIZE], n = 10, choice, pos, val;

    while (1) {
        printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            if (n >= SIZE) {
                printf("Array is full!\n");
                break;
            }
            printf("Enter position (0 to %d): ", n);
            scanf("%d", &pos);
            if (pos < 0 || pos > n) {
                printf("Invalid position!\n");
                break;
            }
            printf("Enter value: ");
            scanf("%d", &val);
            for (int i = n; i > pos; i--)
                arr[i] = arr[i - 1];
            arr[pos] = val;
            n++;
            printf("Inserted successfully.\n");
            break;

        case 2:
            if (n == 0) {
                printf("Array is empty!\n");
                break;
            }
            printf("Enter position to delete (0 to %d): ", n - 1);
            scanf("%d", &pos);
            if (pos < 0 || pos >= n) {
                printf("Invalid position!\n");
                break;
            }
            for (int i = pos; i < n - 1; i++)
                arr[i] = arr[i + 1];
            n--;
            printf("Deleted successfully.\n");
            break;

        case 3:
            if (n == 0) {
                printf("Array is empty!\n");
                break;
            }
            printf("Array elements: ");
            for (int i = 0; i < n; i++)
                printf("%d ", arr[i]);
            printf("\n");
            break;

        case 4:
            return 0;

        default:
            printf("Invalid choice!\n");
        }
    }
}
8) Write a C program to search a number using Linear Search method
#include <stdio.h>

int main() {
    int arr[100], n, key, found = 0;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter number to search: ");
    scanf("%d", &key);

    for(int i = 0; i < n; i++) {
        if(arr[i] == key) {
            printf("Number found at position %d\n", i);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Number not found in the array.\n");

    return 0;
}
9) Write a C program to search a number using Binary Search method
#include <stdio.h>

int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1, mid;

    while (low <= high) {
        mid = (low + high) / 2;

        if (arr[mid] == key)
            return mid;
        else if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return -1;
}

int main() {
    int arr[100], n, key, pos;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d sorted elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter number to search: ");
    scanf("%d", &key);

    pos = binarySearch(arr, n, key);

    if (pos != -1)
        printf("Number found at position %d\n", pos);
    else
        printf("Number not found in the array.\n");

    return 0;
}
10) 10. Write a C program to implement Linked list operations
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
} *head = NULL;

void insert(int val) {
    struct Node *n = malloc(sizeof(struct Node)), *t = head;
    n->data = val; n->next = NULL;
    if (!head) head = n;
    else {
        while (t->next) t = t->next;
        t->next = n;
    }
}

void del(int val) {
    struct Node *t = head, *p = NULL;
    while (t && t->data != val) { p = t; t = t->next; }
    if (!t) return;
    if (!p) head = t->next;
    else p->next = t->next;
    free(t);
}

void display() {
    struct Node *t = head;
    while (t) { printf("%d ", t->data); t = t->next; }
    printf("\n");
}

int main() {
    insert(10); insert(20); insert(30);
    display();
    del(20);
    display();
    return 0;
}
11. Write a C program to implement Stack operations such as PUSH,
POP and PEEK
#include <stdio.h>
int stack[5], top = -1;

void push(int v) {
    if (top < 4) stack[++top] = v;
}

void pop() {
    if (top >= 0) top--;
}

void peek() {
    if (top >= 0) printf("Top: %d\n", stack[top]);
}

void display() {
    for (int i = top; i >= 0; i--) printf("%d ", stack[i]);
    printf("\n");
}

int main() {
    push(10); push(20); push(30);
    display();   // 30 20 10
    peek();      // Top: 30
    pop();
    display();   // 20 10
    return 0;
}
12. Write a C program to implement the application of Stack (Notations)
#include <stdio.h>
#include <ctype.h>
#define SIZE 100

char stack[SIZE];
int top = -1;

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }
char peek() { return stack[top]; }

int prec(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

void infixToPostfix(char *exp) {
    for (int i = 0; exp[i]; i++) {
        if (isalnum(exp[i])) printf("%c", exp[i]);
        else if (exp[i] == '(') push(exp[i]);
        else if (exp[i] == ')') {
            while (peek() != '(') printf("%c", pop());
            pop(); // remove '('
        }
        else {
            while (top != -1 && prec(peek()) >= prec(exp[i]))
                printf("%c", pop());
            push(exp[i]);
        }
    }
    while (top != -1) printf("%c", pop());
}

int main() {
    char exp[] = "A+(B*C)";
    printf("Postfix: ");
    infixToPostfix(exp);  // Output: ABC*+
    return 0;
}
13. Write a C program to implement Queue operations such as ENQUEUE, DEQUEUE
and Display
#include <stdio.h>
#define SIZE 5

int queue[SIZE], front = 0, rear = -1;

void enqueue(int val) {
    if (rear < SIZE - 1)
        queue[++rear] = val;
    else
        printf("Queue Full\n");
}

void dequeue() {
    if (front > rear)
        printf("Queue Empty\n");
    else
        front++;
}

void display() {
    for (int i = front; i <= rear; i++)
        printf("%d ", queue[i]);
    printf("\n");
}

int main() {
    enqueue(10); enqueue(20); enqueue(30);
    display();      // 10 20 30
    dequeue();
    display();      // 20 30
    return 0;
}
14. Write a C program to implement the Tree Traversals (Inorder, Preorder,
Postorder)
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node* newNode(int val) {
    struct Node* n = malloc(sizeof(struct Node));
    n->data = val;
    n->left = n->right = NULL;
    return n;
}

void inorder(struct Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void preorder(struct Node* root) {
    if (root) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(struct Node* root) {
    if (root) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    struct Node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);

    printf("Inorder: "); inorder(root); printf("\n");
    printf("Preorder: "); preorder(root); printf("\n");
    printf("Postorder: "); postorder(root); printf("\n");
    return 0;
}
15. Write a C program to implement hashing using Linear Probing method
#include <stdio.h>
#define SIZE 10

int hashTable[SIZE];

void init() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1;
}

void insert(int key) {
    int i = key % SIZE;
    while (hashTable[i] != -1)
        i = (i + 1) % SIZE;
    hashTable[i] = key;
}

void display() {
    for (int i = 0; i < SIZE; i++)
        printf("%d => %d\n", i, hashTable[i]);
}

int main() {
    init();
    insert(23); insert(43); insert(13); insert(27);
    display();
    return 0;
}
16. Write a C program to arrange a series of numbers using Insertion Sort
#include <stdio.h>

void insertionSort(int a[], int n) {
    for (int i = 1; i < n; i++) {
        int key = a[i], j = i - 1;
        while (j >= 0 && a[j] > key)
            a[j + 1] = a[j--];
        a[j + 1] = key;
    }
}

int main() {
    int a[] = {5, 2, 9, 1, 6}, n = 5;
    insertionSort(a, n);
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    return 0;
}
17. Write a C program to arrange a series of numbers using Merge Sort
#include <stdio.h>

void merge(int a[], int l, int m, int r) {
    int i = l, j = m+1, k = 0, b[100];
    while (i <= m && j <= r)
        b[k++] = (a[i] < a[j]) ? a[i++] : a[j++];
    while (i <= m) b[k++] = a[i++];
    while (j <= r) b[k++] = a[j++];
    for (i = l, j = 0; i <= r; i++, j++)
        a[i] = b[j];
}

void mergeSort(int a[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSort(a, l, m);
        mergeSort(a, m + 1, r);
        merge(a, l, m, r);
    }
}

int main() {
    int a[] = {8, 4, 2, 9, 5}, n = 5;
    mergeSort(a, 0, n - 1);
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    return 0;
}
18. Write a C program to arrange a series of numbers using Quick Sort
#include <stdio.h>

void swap(int *a, int *b) {
    int t = *a; *a = *b; *b = t;
}

int partition(int a[], int low, int high) {
    int pivot = a[high], i = low - 1;
    for (int j = low; j < high; j++) {
        if (a[j] < pivot) {
            i++;
            swap(&a[i], &a[j]);
        }
    }
    swap(&a[i+1], &a[high]);
    return i + 1;
}

void quickSort(int a[], int low, int high) {
    if (low < high) {
        int pi = partition(a, low, high);
        quickSort(a, low, pi - 1);
        quickSort(a, pi + 1, high);
    }
}

int main() {
    int a[] = {9, 4, 6, 2, 8}, n = 5;
    quickSort(a, 0, n - 1);
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    return 0;
}
19. Write a C program to implement Heap sort
#include <stdio.h>

void heapify(int a[], int n, int i) {
    int largest = i, l = 2*i+1, r = 2*i+2;
    if (l < n && a[l] > a[largest]) largest = l;
    if (r < n && a[r] > a[largest]) largest = r;
    if (largest != i) {
        int t = a[i]; a[i] = a[largest]; a[largest] = t;
        heapify(a, n, largest);
    }
}

void heapSort(int a[], int n) {
    for (int i = n/2 - 1; i >= 0; i--)
        heapify(a, n, i);
    for (int i = n - 1; i >= 0; i--) {
        int t = a[0]; a[0] = a[i]; a[i] = t;
        heapify(a, i, 0);
    }
}

int main() {
    int a[] = {5, 3, 8, 4, 1}, n = 5;
    heapSort(a, n);
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    return 0;
}
20. Write a program to perform the following operations:
a) Insert an element into a AVL tree
b) Delete an element from a AVL tree
c) Search for a key element in a AVL tree
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key, height;
    struct Node *left, *right;
};

int height(struct Node *n) {
    return n ? n->height : 0;
}

int max(int a, int b) {
    return a > b ? a : b;
}

struct Node* newNode(int key) {
    struct Node* n = malloc(sizeof(struct Node));
    n->key = key; n->left = n->right = NULL; n->height = 1;
    return n;
}

struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    y->left = x->right;
    x->right = y;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    x->right = y->left;
    y->left = x;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

int getBalance(struct Node* n) {
    return n ? height(n->left) - height(n->right) : 0;
}

struct Node* insert(struct Node* node, int key) {
    if (!node) return newNode(key);
    if (key < node->key) node->left = insert(node->left, key);
    else if (key > node->key) node->right = insert(node->right, key);
    else return node;

    node->height = 1 + max(height(node->left), height(node->right));
    int b = getBalance(node);

    if (b > 1 && key < node->left->key) return rightRotate(node);
    if (b < -1 && key > node->right->key) return leftRotate(node);
    if (b > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (b < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}

struct Node* minValue(struct Node* n) {
    while (n->left) n = n->left;
    return n;
}

struct Node* delete(struct Node* root, int key) {
    if (!root) return root;
    if (key < root->key) root->left = delete(root->left, key);
    else if (key > root->key) root->right = delete(root->right, key);
    else {
        if (!root->left || !root->right) {
            struct Node* temp = root->left ? root->left : root->right;
            free(root);
            return temp;
        }
        struct Node* temp = minValue(root->right);
        root->key = temp->key;
        root->right = delete(root->right, temp->key);
    }

    root->height = 1 + max(height(root->left), height(root->right));
    int b = getBalance(root);

    if (b > 1 && getBalance(root->left) >= 0) return rightRotate(root);
    if (b > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (b < -1 && getBalance(root->right) <= 0) return leftRotate(root);
    if (b < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}

int search(struct Node* root, int key) {
    if (!root) return 0;
    if (root->key == key) return 1;
    return key < root->key ? search(root->left, key) : search(root->right, key);
}

void inorder(struct Node* root) {
    if (root) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

int main() {
    struct Node* root = NULL;
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 10);

    printf("Inorder: ");
    inorder(root); // 10 20 30 40
    printf("\n");

    printf("Search 20: %s\n", search(root, 20) ? "Found" : "Not Found");

    root = delete(root, 20);
    printf("After delete 20: ");
    inorder(root); // 10 30 40
    printf("\n");

    return 0;
}
21. Write a C program to Graph traversal using Breadth First Search
#include <stdio.h>

#define SIZE 10
int adj[SIZE][SIZE], visited[SIZE], queue[SIZE], front = 0, rear = -1;

void bfs(int start, int n) {
    visited[start] = 1;
    queue[++rear] = start;

    while (front <= rear) {
        int v = queue[front++];
        printf("%d ", v);

        for (int i = 0; i < n; i++) {
            if (adj[v][i] && !visited[i]) {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int n = 5; // number of vertices
    // Sample undirected graph
    adj[0][1] = adj[1][0] = 1;
    adj[0][2] = adj[2][0] = 1;
    adj[1][3] = adj[3][1] = 1;
    adj[2][4] = adj[4][2] = 1;

    printf("BFS starting from node 0: ");
    bfs(0, n);  // Output: 0 1 2 3 4
    return 0;
}
22. Write a C program to Graph traversal using Depth First Search
#include <stdio.h>

#define SIZE 10
int adj[SIZE][SIZE], visited[SIZE];

void dfs(int v, int n) {
    visited[v] = 1;
    printf("%d ", v);

    for (int i = 0; i < n; i++) {
        if (adj[v][i] && !visited[i])
            dfs(i, n);
    }
}

int main() {
    int n = 5; // number of vertices
    // Sample undirected graph
    adj[0][1] = adj[1][0] = 1;
    adj[0][2] = adj[2][0] = 1;
    adj[1][3] = adj[3][1] = 1;
    adj[2][4] = adj[4][2] = 1;

    printf("DFS starting from node 0: ");
    dfs(0, n);  // Output: 0 1 3 2 4
    return 0;
}
23. Implementation of Shortest Path Algorithms using Dijkstra’s Algorithm
#include <stdio.h>
#define INF 9999
#define V 5

int minDistance(int dist[], int visited[]) {
    int min = INF, idx = -1;
    for (int i = 0; i < V; i++)
        if (!visited[i] && dist[i] < min)
            min = dist[i], idx = i;
    return idx;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V], visited[V] = {0};

    for (int i = 0; i < V; i++)
        dist[i] = INF;
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = 1;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printf("Vertex\tDistance from Source %d\n", src);
    for (int i = 0; i < V; i++)
        printf("%d\t%d\n", i, dist[i]);
}

int main() {
    int graph[V][V] = {
        {0, 10, 0, 5, 0},
        {10, 0, 1, 2, 0},
        {0, 1, 0, 0, 4},
        {5, 2, 0, 0, 2},
        {0, 0, 4, 2, 0}
    };

    dijkstra(graph, 0);  // Start from vertex 0
    return 0;
}
24. Implementation of Minimum Spanning Tree using Prim’s Algorithm
#include <stdio.h>
#define INF 9999
#define V 5

int minKey(int key[], int mstSet[]) {
    int min = INF, minIndex = -1;
    for (int v = 0; v < V; v++)
        if (!mstSet[v] && key[v] < min)
            min = key[v], minIndex = v;
    return minIndex;
}

void primMST(int graph[V][V]) {
    int parent[V], key[V], mstSet[V] = {0};

    for (int i = 0; i < V; i++)
        key[i] = INF;
    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;

        for (int v = 0; v < V; v++)
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d\t%d\n", parent[i], i, graph[i][parent[i]]);
}

int main() {
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };

    primMST(graph);
    return 0;
}
25. Implementation of Minimum Spanning Tree using Kruskal Algorithm
#include <stdio.h>
#include <stdlib.h>

#define V 5
#define E 7

struct Edge {
    int src, dest, weight;
};

int parent[V];

int find(int i) {
    while (i != parent[i])
        i = parent[i];
    return i;
}

void unionSets(int a, int b) {
    int rootA = find(a);
    int rootB = find(b);
    parent[rootA] = rootB;
}

int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

void kruskal(struct Edge edges[]) {
    for (int i = 0; i < V; i++)
        parent[i] = i;

    qsort(edges, E, sizeof(edges[0]), compare);

    printf("Edge \tWeight\n");
    int count = 0;
    for (int i = 0; i < E && count < V - 1; i++) {
        int u = edges[i].src;
        int v = edges[i].dest;
        if (find(u) != find(v)) {
            printf("%d - %d\t%d\n", u, v, edges[i].weight);
            unionSets(u, v);
            count++;
        }
    }
}

int main() {
    struct Edge edges[E] = {
        {0, 1, 2}, {0, 3, 6}, {1, 2, 3},
        {1, 3, 8}, {1, 4, 5}, {2, 4, 7},
        {3, 4, 9}
    };

    kruskal(edges);
    return 0;
}










